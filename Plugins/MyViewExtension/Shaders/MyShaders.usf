#include "/Engine/Public/Platform.ush"
#include "/Engine/Private/Common.ush"
#include "/Engine/Private/ScreenPass.ush"

SCREEN_PASS_TEXTURE_VIEWPORT(ViewParams)

SamplerState InputSampler;
Texture2D SceneColor;
Texture2D InputTexture;
Texture2D<uint2> InputStencilTexture;
float4 Color;

float2 PosToUV(float2 Pos)
{
    float2 ViewportUV = ((Pos - ViewParams_ViewportMin.xy) * ViewParams_ViewportSizeInverse.xy);
    return ViewportUV * ViewParams_UVViewportSize + ViewParams_UVViewportMin;
}
//
void UVMaskMainPS(
	float4 SvPosition : SV_POSITION,
	out float4 UVMask : SV_Target0,
	out float4 CopyColor : SV_Target1
)
{
    uint2 stencil = InputStencilTexture.Load(uint3(SvPosition.xy, 0));//拿裁剪空间坐标采的
    float2 UV = PosToUV(SvPosition.xy);
    if (stencil.y == 1)
    {
        UVMask = float4(UV.x, UV.y, 0, 1);
    }
    else
    {
        UVMask = float4(0, 0, 0, 0);
    }

    //可以看出CopyColor是一张镂空的图
    CopyColor = SceneColor.SampleLevel(InputSampler, UV, 0);
}

float4 CombineMainPS(float4 SvPosition : SV_POSITION) : SV_Target0
{
    float2 UV = PosToUV(SvPosition.xy);
    
    //InputTexture就是上面跑的UVMask结果
    float4 samp = Texture2DSample(InputTexture, InputSampler, UV);

    if (length(samp.xyz) > 0)
    {
        return Color;
    }
    return Texture2DSample(SceneColor, InputSampler, UV);
}